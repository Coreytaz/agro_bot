import { LOCALIZATION_KEYS } from "@config/localization.config";
import {
  createBroadcast,
  deleteBroadcast,
  findAndCountAllBroadcast,
  getBroadcastById,
  updateBroadcast,
} from "@core/db/models";
import { sendBroadcastNow } from "@core/db/utils/broadcastScheduler";
import logger from "@core/utils/logger";
import { InlineKeyboard } from "grammy";

import {
  broadcastCancelCreate,
  broadcastConfirmCreate,
  broadcastSkipImage,
} from "../awaits/broadcast-create-wait";
import type { Context } from "../core/interface/Context";
import { createPagination, ParamsExtractorDB } from "../core/utils";
import { getCronManager } from "../cronManager";
import { createBroadcastMenuKeyboard } from "../utils";

const BROADCAST_LIST_DETAIL_KEY = "broadcast.list.detail";
export const BROADCAST_LIST_KEY = "broadcast.list";
const BROADCAST_MENU_KEY = "broadcast_menu";
const BROADCAST_EDIT_TITLE_KEY = "broadcast.edit.title";
const BROADCAST_TOGGLE_RECURRING_KEY = "broadcast.toggle.recurring";
const BROADCAST_TOGGLE_SCHEDULE_KEY = "broadcast.toggle.schedule";
const BROADCAST_EDIT_CRON_KEY = "broadcast.edit.cron";
const BROADCAST_SCHEDULE_KEY = "broadcast.schedule";
const BROADCAST_DELETE_KEY = "broadcast.delete";
const BROADCAST_DELETE_CONFIRM_KEY = "broadcast.delete.confirm";

const broadcastMenuHandler = async (ctx: Context): Promise<void> => {
  const [title, keyboard] = await createBroadcastMenuKeyboard(ctx);

  await ctx.editAndReply.reply(title, {
    reply_markup: keyboard,
  });
};

const broadcastCreateHandler = async (ctx: Context): Promise<void> => {
  const translations = await ctx.tm([
    LOCALIZATION_KEYS.BROADCAST_CREATE_TITLE,
    LOCALIZATION_KEYS.BROADCAST_CREATE_ENTER_TITLE,
  ]);

  await ctx.editAndReply.reply(
    `${translations[LOCALIZATION_KEYS.BROADCAST_CREATE_TITLE]}\n\n${translations[LOCALIZATION_KEYS.BROADCAST_CREATE_ENTER_TITLE]}`,
    {
      reply_markup: undefined,
    },
  );

  if (ctx.sessionSet) {
    await ctx.sessionSet({
      route: "broadcast_create_title",
      data: { step: "waiting_title" },
    });
  }
};

const broadcastSendNowHandler = async (ctx: Context): Promise<void> => {
  const sessionData = ctx.session?.data as any;
  const { title, message, media } = sessionData ?? {};

  if (!title || !message) {
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
    await ctx.sessionClear?.();
    return;
  }

  try {
    const broadcast = await createBroadcast({
      title,
      message,
      media,
      createdBy: ctx.chatDB.chatId,
      isRecurring: false,
      isScheduled: false,
    });

    await sendBroadcastNow(broadcast.id);

    const translations = await ctx.tm([
      LOCALIZATION_KEYS.BROADCAST_SEND_SUCCESS,
    ]);

    await ctx.sessionClear?.();
    await ctx.answerCallbackQuery(
      translations[LOCALIZATION_KEYS.BROADCAST_SEND_SUCCESS],
    );

    const [titleMsg, keyboard] = await createBroadcastMenuKeyboard(ctx);

    await ctx.editAndReply.universalReply({
      content: titleMsg,
      type: "text",
      options: {
        reply_markup: keyboard,
      },
    });
  } catch {
    const translations = await ctx.tm([LOCALIZATION_KEYS.BROADCAST_SEND_ERROR]);
    await ctx.answerCallbackQuery(
      translations[LOCALIZATION_KEYS.BROADCAST_SEND_ERROR],
    );
    await ctx.sessionClear?.();
  }
};

const broadcastListHandler = async (ctx: Context): Promise<void> => {
  const params = ctx.paramsExtractor?.params ?? {};
  const page = parseInt(params?.page ?? "1");
  const limit = 5;
  const offset = (page - 1) * limit;

  const translations = await ctx.tm([
    LOCALIZATION_KEYS.BROADCAST_MENU_LIST,
    LOCALIZATION_KEYS.BUTTON_BACK,
    LOCALIZATION_KEYS.BUTTON_REFRESH,
  ]);

  try {
    const { data: broadcasts, total } = await findAndCountAllBroadcast(
      {},
      {
        offset,
        limit,
      },
    );

    const totalPages = Math.ceil(total / limit);

    const keyboard = new InlineKeyboard();

    const userParamInstances = broadcasts.map(broadcast => {
      const params = new ParamsExtractorDB(BROADCAST_LIST_DETAIL_KEY);
      params.addParams({ chatId: broadcast.id, page });
      return params;
    });

    const userCallbackDataStrings =
      await ParamsExtractorDB.createManyAsync(userParamInstances);

    for (const [index, broadcast] of broadcasts.entries()) {
      const callbackData = userCallbackDataStrings[index];
      keyboard.text(broadcast.title, callbackData).row();
    }

    await createPagination({
      page,
      count: totalPages,
      route: BROADCAST_LIST_KEY,
      menu: keyboard,
      params,
    });

    keyboard
      .text(translations[LOCALIZATION_KEYS.BUTTON_BACK], BROADCAST_MENU_KEY)
      .row();

    const title = `${translations[LOCALIZATION_KEYS.BROADCAST_MENU_LIST]}\n${page} / ${totalPages}`;

    await ctx.answerCallbackQuery();
    await ctx.editAndReply.reply(title, {
      reply_markup: keyboard,
    });
  } catch (error) {
    if (error instanceof Error) logger.error(error.message);

    const keyboard = new InlineKeyboard();
    const params = new ParamsExtractorDB(BROADCAST_LIST_KEY);
    params.addParams({ page });
    const refreshCallbackData = await params.toStringAsync();

    keyboard
      .text(translations[LOCALIZATION_KEYS.BUTTON_REFRESH], refreshCallbackData)
      .row()
      .text(translations[LOCALIZATION_KEYS.BUTTON_BACK], "admin_back");

    await ctx.answerCallbackQuery();
    await ctx.editAndReply.reply(
      `${translations[LOCALIZATION_KEYS.ADMIN_MENU_CONTENT]}\n–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö`,
      {
        reply_markup: keyboard,
      },
    );
  }
};

const broadcastDetailHandler = async (ctx: Context): Promise<void> => {
  const params = ctx.paramsExtractor?.params ?? {};
  const broadcastId = parseInt(params?.chatId ?? "0");
  const page = parseInt(params?.page ?? "1");

  if (!broadcastId) {
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞: ID —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  try {
    const broadcast = await getBroadcastById(broadcastId);

    if (!broadcast) {
      await ctx.answerCallbackQuery("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    const keyboard = new InlineKeyboard();

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const editTitleParams = new ParamsExtractorDB(BROADCAST_EDIT_TITLE_KEY);
    editTitleParams.addParams({ broadcastId, page });
    const editTitleCallback = await editTitleParams.toStringAsync();

    const toggleRecurringParams = new ParamsExtractorDB(
      BROADCAST_TOGGLE_RECURRING_KEY,
    );

    toggleRecurringParams.addParams({ broadcastId, page });
    const toggleRecurringCallback = await toggleRecurringParams.toStringAsync();

    const scheduleToggleParams = new ParamsExtractorDB(
      BROADCAST_TOGGLE_SCHEDULE_KEY,
    );
    scheduleToggleParams.addParams({ broadcastId, page });
    const scheduleToggleCallback = await scheduleToggleParams.toStringAsync();

    const editCronParams = new ParamsExtractorDB(BROADCAST_EDIT_CRON_KEY);
    editCronParams.addParams({ broadcastId, page });
    const editCronCallback = await editCronParams.toStringAsync();

    const scheduleParams = new ParamsExtractorDB(BROADCAST_SCHEDULE_KEY);
    scheduleParams.addParams({ broadcastId, page });
    const scheduleCallback = await scheduleParams.toStringAsync();

    const deleteParams = new ParamsExtractorDB(BROADCAST_DELETE_KEY);
    deleteParams.addParams({ broadcastId, page });
    const deleteCallback = await deleteParams.toStringAsync();

    const backParams = new ParamsExtractorDB(BROADCAST_LIST_KEY);
    backParams.addParams({ page });
    const backCallback = await backParams.toStringAsync();

    keyboard
      .text("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", editTitleCallback)
      .row()
      .text(
        broadcast.isRecurring
          ? "üîÑ –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å"
          : "üîÑ –°–¥–µ–ª–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º",
        toggleRecurringCallback,
      )
      .row()
      .text(
        broadcast.isScheduled
          ? "üîÑ –û—Ç–∫–ª—é—á–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"
          : "üîÑ –°–¥–µ–ª–∞—Ç—å –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–º",
        scheduleToggleCallback,
      )
      .row()
      .text("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", editCronCallback)
      .row()
      .text("‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", scheduleCallback)
      .row()
      .text("üíÄ –£–¥–∞–ª–∏—Ç—å", deleteCallback)
      .row()
      .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", backCallback);

    const scheduleStatus = broadcast.isScheduled ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç";

    const recurringStatus = broadcast.isRecurring ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç";
    const cronInfo = broadcast.cronExpression
      ? `\`${broadcast.cronExpression}\``
      : "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ";

    const statusEmoji =
      {
        draft: "üìù",
        sending: "üì§",
        sent: "‚úÖ",
        error: "‚ùå",
        scheduled: "‚è∞",
      }[broadcast.status] ?? "üìù";

    const detailText = `
üìã *–î–µ—Ç–∞–ª–∏ —Ä–∞—Å—Å—ã–ª–∫–∏*

üè∑ *–ù–∞–∑–≤–∞–Ω–∏–µ:* ${broadcast.title}
${statusEmoji} *–°—Ç–∞—Ç—É—Å:* ${broadcast.status}
üîÑ *–†–µ–≥—É–ª—è—Ä–Ω—ã–π:* ${recurringStatus}
üîÑ *–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω:* ${scheduleStatus}
‚è∞ *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* ${cronInfo}
üë• *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* ${broadcast.totalUsers ?? 0}
‚úÖ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* ${broadcast.sentCount ?? 0}
‚ùå *–û—à–∏–±–∫–∏:* ${broadcast.errorCount ?? 0}
üìÖ *–°–æ–∑–¥–∞–Ω:* ${new Date(broadcast.created_at).toLocaleDateString("ru-RU")}

üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:*
${broadcast.message}
    `.trim();

    await ctx.answerCallbackQuery();
    await ctx.editAndReply.reply(detailText, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  } catch (error) {
    if (error instanceof Error) logger.error(error.message);
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏");
  }
};

const broadcastEditTitleHandler = async (ctx: Context): Promise<void> => {
  const params = ctx.paramsExtractor?.params ?? {};
  const broadcastId = parseInt(params?.broadcastId ?? "0");
  const page = parseInt(params?.page ?? "1");

  if (!broadcastId) {
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞: ID —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  await ctx.answerCallbackQuery();
  await ctx.editAndReply.reply(
    "üìù *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏*\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
    {
      parse_mode: "Markdown",
    },
  );

  if (ctx.sessionSet) {
    await ctx.sessionSet({
      route: "broadcast_edit_title_wait",
      data: { broadcastId, page },
    });
  }
};

const broadcastToggleScheduleHandler = async (ctx: Context): Promise<void> => {
  const params = ctx.paramsExtractor?.params ?? {};
  const broadcastId = parseInt(params?.broadcastId ?? "0");
  const page = parseInt(params?.page ?? "1");

  if (!broadcastId) {
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞: ID —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  try {
    const broadcast = await getBroadcastById(broadcastId);

    if (!broadcast) {
      await ctx.answerCallbackQuery("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    const newSchedulingStatus = !broadcast.isScheduled;

    const newBroadcast = await updateBroadcast(broadcastId, {
      isScheduled: newSchedulingStatus,
      status: newSchedulingStatus ? "scheduled" : "draft",
    });

    const cronManager = getCronManager();

    await cronManager?.scheduleJob(newBroadcast);

    await ctx.answerCallbackQuery(
      newSchedulingStatus
        ? "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–ø–µ—Ä—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞"
        : "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞",
    );

    const updatedBroadcast = await getBroadcastById(broadcastId);
    if (updatedBroadcast) {
      const tempParamsExtractor = new ParamsExtractorDB(
        BROADCAST_LIST_DETAIL_KEY,
      );
      tempParamsExtractor.addParams({ chatId: broadcastId, page });
      ctx.paramsExtractor = tempParamsExtractor;
      await broadcastDetailHandler(ctx);
    }
  } catch (error) {
    if (error instanceof Error) logger.error(error.message);
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è");
  }
};

const broadcastToggleRecurringHandler = async (ctx: Context): Promise<void> => {
  const params = ctx.paramsExtractor?.params ?? {};
  const broadcastId = parseInt(params?.broadcastId ?? "0");
  const page = parseInt(params?.page ?? "1");

  if (!broadcastId) {
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞: ID —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  try {
    const broadcast = await getBroadcastById(broadcastId);

    if (!broadcast) {
      await ctx.answerCallbackQuery("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    const newRecurringStatus = !broadcast.isRecurring;

    await updateBroadcast(broadcastId, {
      isRecurring: newRecurringStatus,
    });

    await ctx.answerCallbackQuery(
      newRecurringStatus
        ? "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Ç–µ–ø–µ—Ä—å —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è"
        : "‚ùå –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∞",
    );

    const updatedBroadcast = await getBroadcastById(broadcastId);
    if (updatedBroadcast) {
      const tempParamsExtractor = new ParamsExtractorDB(
        BROADCAST_LIST_DETAIL_KEY,
      );
      tempParamsExtractor.addParams({ chatId: broadcastId, page });
      ctx.paramsExtractor = tempParamsExtractor;
      await broadcastDetailHandler(ctx);
    }
  } catch (error) {
    if (error instanceof Error) logger.error(error.message);
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç–∏");
  }
};

const broadcastEditCronHandler = async (ctx: Context): Promise<void> => {
  const params = ctx.paramsExtractor?.params ?? {};
  const broadcastId = parseInt(params?.broadcastId ?? "0");
  const page = parseInt(params?.page ?? "1");

  if (!broadcastId) {
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞: ID —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  await ctx.answerCallbackQuery();
  await ctx.editAndReply.reply(`‚è∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏`);

  if (ctx.sessionSet) {
    await ctx.sessionSet({
      route: "broadcast_edit_cron_wait",
      data: { broadcastId, page },
    });
  }
};

const broadcastScheduleHandler = async (ctx: Context): Promise<void> => {
  const params = ctx.paramsExtractor?.params ?? {};
  const broadcastId = parseInt(params?.broadcastId ?? "0");
  const page = parseInt(params?.page ?? "1");

  if (!broadcastId) {
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞: ID —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  try {
    const broadcast = await getBroadcastById(broadcastId);

    if (!broadcast) {
      await ctx.answerCallbackQuery("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    const keyboard = new InlineKeyboard();

    const scheduleNowParams = new ParamsExtractorDB("broadcast.schedule.now");
    scheduleNowParams.addParams({ broadcastId, page });
    const scheduleNowCallback = await scheduleNowParams.toStringAsync();

    const scheduleIn1HourParams = new ParamsExtractorDB(
      "broadcast.schedule.1hour",
    );
    scheduleIn1HourParams.addParams({ broadcastId, page });
    const scheduleIn1HourCallback = await scheduleIn1HourParams.toStringAsync();

    const scheduleCustomParams = new ParamsExtractorDB(
      "broadcast.schedule.custom",
    );
    scheduleCustomParams.addParams({ broadcastId, page });
    const scheduleCustomCallback = await scheduleCustomParams.toStringAsync();

    const backParams = new ParamsExtractorDB(BROADCAST_LIST_DETAIL_KEY);
    backParams.addParams({ chatId: broadcastId, page });
    const backCallback = await backParams.toStringAsync();

    keyboard
      .text("üöÄ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", scheduleNowCallback)
      .row()
      .text("üïê –ß–µ—Ä–µ–∑ 1 —á–∞—Å", scheduleIn1HourCallback)
      .row()
      .text("üìÖ –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º—è", scheduleCustomCallback)
      .row()
      .text("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", backCallback);

    const statusText = broadcast.isScheduled
      ? `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ 
‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: ${`\`${broadcast.cronExpression}\`` || "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"}`
      : "";

    const scheduleText = `üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
${statusText}
–ù–∞–∑–≤–∞–Ω–∏–µ: ${broadcast.title}
*–°—Ç–∞—Ç—É—Å:* ${broadcast.status}
–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É`;

    await ctx.answerCallbackQuery();
    await ctx.editAndReply.reply(scheduleText, {
      parse_mode: "Markdown",
      reply_markup: keyboard,
    });
  } catch (error) {
    if (error instanceof Error) logger.error(error.message);
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏");
  }
};

const broadcastScheduleNowHandler = async (ctx: Context): Promise<void> => {
  const params = ctx.paramsExtractor?.params ?? {};
  const broadcastId = parseInt(params?.broadcastId ?? "0");

  if (!broadcastId) {
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞: ID —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  try {
    const broadcast = await getBroadcastById(broadcastId);

    if (!broadcast) {
      await ctx.answerCallbackQuery("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
    await sendBroadcastNow(broadcastId);

    await ctx.answerCallbackQuery("üöÄ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!");

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é
    const tempParamsExtractor = new ParamsExtractorDB(
      BROADCAST_LIST_DETAIL_KEY,
    );
    tempParamsExtractor.addParams({
      chatId: broadcastId,
      page: parseInt(params?.page ?? "1"),
    });
    ctx.paramsExtractor = tempParamsExtractor;
    await broadcastDetailHandler(ctx);
  } catch (error) {
    if (error instanceof Error) logger.error(error.message);
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏");
  }
};

const broadcastScheduleIn1HourHandler = async (ctx: Context): Promise<void> => {
  const params = ctx.paramsExtractor?.params ?? {};
  const broadcastId = parseInt(params?.broadcastId ?? "0");

  if (!broadcastId) {
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞: ID —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  try {
    // –°–æ–∑–¥–∞–µ–º cron –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1 —á–∞—Å
    const now = new Date();
    const in1Hour = new Date(now.getTime() + 60 * 60 * 1000);
    const cronExpression = `${in1Hour.getMinutes()} ${in1Hour.getHours()} ${in1Hour.getDate()} ${in1Hour.getMonth() + 1} *`;

    await updateBroadcast(broadcastId, {
      cronExpression,
      isScheduled: true,
      isRecurring: false,
      status: "scheduled",
    });

    await ctx.answerCallbackQuery("üïê –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —á–µ—Ä–µ–∑ 1 —á–∞—Å");

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –º–µ–Ω—é
    const tempParamsExtractor = new ParamsExtractorDB(
      BROADCAST_LIST_DETAIL_KEY,
    );
    tempParamsExtractor.addParams({
      chatId: broadcastId,
      page: parseInt(params?.page ?? "1"),
    });
    ctx.paramsExtractor = tempParamsExtractor;
    await broadcastDetailHandler(ctx);
  } catch (error) {
    if (error instanceof Error) logger.error(error.message);
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏");
  }
};

const broadcastScheduleCustomHandler = async (ctx: Context): Promise<void> => {
  const params = ctx.paramsExtractor?.params ?? {};
  const broadcastId = parseInt(params?.broadcastId ?? "0");
  const page = parseInt(params?.page ?? "1");

  if (!broadcastId) {
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞: ID —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  await ctx.answerCallbackQuery();
  await ctx.editAndReply.reply(
    `üìÖ *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏*

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
\`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\`

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ \`15.10.2025 14:30\`
‚Ä¢ \`01.11.2025 09:00\`
‚Ä¢ \`25.12.2025 18:15\`

–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 24 —á–∞—Å–∞.`,
    {
      parse_mode: "Markdown",
    },
  );

  if (ctx.sessionSet) {
    await ctx.sessionSet({
      route: "broadcast_schedule_datetime_wait",
      data: { broadcastId, page },
    });
  }
};

const broadcastDeleteHandler = async (ctx: Context): Promise<void> => {
  const params = ctx.paramsExtractor?.params ?? {};
  const broadcastId = parseInt(params?.broadcastId ?? "0");
  const page = parseInt(params?.page ?? "1");

  if (!broadcastId) {
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞: ID —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  try {
    const broadcast = await getBroadcastById(broadcastId);

    if (!broadcast) {
      await ctx.answerCallbackQuery("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    const keyboard = new InlineKeyboard();

    const confirmParams = new ParamsExtractorDB(BROADCAST_DELETE_CONFIRM_KEY);
    confirmParams.addParams({ broadcastId, page });
    const confirmCallback = await confirmParams.toStringAsync();

    const backParams = new ParamsExtractorDB(BROADCAST_LIST_DETAIL_KEY);
    backParams.addParams({ chatId: broadcastId, page });
    const backCallback = await backParams.toStringAsync();

    keyboard
      .text("üóë –î–∞, —É–¥–∞–ª–∏—Ç—å", confirmCallback)
      .text("‚ùå –û—Ç–º–µ–Ω–∞", backCallback)
      .row();

    await ctx.answerCallbackQuery();
    await ctx.editAndReply.reply(
      `üóë *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è*

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?

*–ù–∞–∑–≤–∞–Ω–∏–µ:* ${broadcast.title}
*–°—Ç–∞—Ç—É—Å:* ${broadcast.status}

‚ö†Ô∏è *–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!*`,
      {
        parse_mode: "Markdown",
        reply_markup: keyboard,
      },
    );
  } catch (error) {
    if (error instanceof Error) logger.error(error.message);
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è");
  }
};

const broadcastDeleteConfirmHandler = async (ctx: Context): Promise<void> => {
  const params = ctx.paramsExtractor?.params ?? {};
  const broadcastId = parseInt(params?.broadcastId ?? "0");

  if (!broadcastId) {
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞: ID —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  try {
    const broadcast = await getBroadcastById(broadcastId);

    if (!broadcast) {
      await ctx.answerCallbackQuery("–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      return;
    }

    await deleteBroadcast(broadcastId);

    await ctx.answerCallbackQuery("‚úÖ —Ä–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞");

    await broadcastListHandler(ctx);
  } catch (error) {
    if (error instanceof Error) logger.error(error.message);
    await ctx.answerCallbackQuery("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏");
  }
};

export default {
  broadcast_create: broadcastCreateHandler,
  broadcast_send_now: broadcastSendNowHandler,
  broadcast_confirm_create: broadcastConfirmCreate,
  broadcast_cancel_create: broadcastCancelCreate,
  broadcast_skip_image: broadcastSkipImage,
  [BROADCAST_MENU_KEY]: broadcastMenuHandler,
  [BROADCAST_LIST_KEY]: broadcastListHandler,
  [BROADCAST_LIST_DETAIL_KEY]: broadcastDetailHandler,
  [BROADCAST_EDIT_TITLE_KEY]: broadcastEditTitleHandler,
  [BROADCAST_TOGGLE_RECURRING_KEY]: broadcastToggleRecurringHandler,
  [BROADCAST_TOGGLE_SCHEDULE_KEY]: broadcastToggleScheduleHandler,
  [BROADCAST_EDIT_CRON_KEY]: broadcastEditCronHandler,
  [BROADCAST_SCHEDULE_KEY]: broadcastScheduleHandler,
  "broadcast.schedule.now": broadcastScheduleNowHandler,
  "broadcast.schedule.1hour": broadcastScheduleIn1HourHandler,
  "broadcast.schedule.custom": broadcastScheduleCustomHandler,
  [BROADCAST_DELETE_KEY]: broadcastDeleteHandler,
  [BROADCAST_DELETE_CONFIRM_KEY]: broadcastDeleteConfirmHandler,
};
