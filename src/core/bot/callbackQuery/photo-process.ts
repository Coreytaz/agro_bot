import logger from "@core/utils/logger";
import type { NextFunction } from "grammy";
import { InlineKeyboard } from "grammy";

import type { Context } from "../core/interface/Context";

export default async function photoProcess(
  ctx: Context,
  next: NextFunction,
): Promise<void> {
  const params = ctx.paramsExtractor?.params;
  const fileId = params?.fileId;

  if (!fileId) {
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞: ID —Ñ–∞–π–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω");
    return;
  }

  await ctx.answerCallbackQuery("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–æ—Ç–æ...");

  try {
    const file = await ctx.api.getFile(fileId);

    console.log(file);

    const path = await file.download("downloads.jpg");

    const url = file.getUrl();

    console.log(path);
    console.log(url);

    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    const keyboard = new InlineKeyboard()
      .text("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ", "photo.upload")
      .row()
      .text("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "menu");

    await ctx.editAndReply.reply(
      `‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ!\n\n` +
        `üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: ${file.file_path ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n` +
        `üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${file.file_size ? `${Math.round(file.file_size / 1024)} KB` : "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n\n` +
        `ü§ñ –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ...\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      {
        reply_markup: keyboard,
      },
    );
  } catch (error) {
    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ:", error);

    const keyboard = new InlineKeyboard()
      .text("üì∏ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "photo.upload")
      .text("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "menu");

    await ctx.editAndReply.reply(
      "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ\n\n" +
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
      {
        reply_markup: keyboard,
      },
    );
  }

  await next();
}
