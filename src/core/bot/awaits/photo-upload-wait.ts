import type { NextFunction } from "grammy";
import { InlineKeyboard } from "grammy";

import type { Context } from "../core/interface/Context";
import { ParamsExtractorDB } from "../core/utils";

export default async function photoUploadWait(
  ctx: Context,
  next: NextFunction,
): Promise<void> {
  const photo = ctx.message?.photo;

  if (!photo) {
    await ctx.editAndReply.reply(
      "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)",
    );
    return;
  }

  const bestPhoto = photo[photo.length - 1];

  if (bestPhoto.file_size && bestPhoto.file_size > 20 * 1024 * 1024) {
    // 20MB
    await ctx.editAndReply.reply(
      "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20MB\n\n" +
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
    );
    return;
  }

  const params = new ParamsExtractorDB("photo.process");
  params.addParams({ fileId: bestPhoto.file_id });

  const keyboard = new InlineKeyboard()
    .text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ", await params.toStringAsync())
    .row()
    .text("üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ", "photo.upload")
    .text("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", "menu");

  await ctx.sessionClear?.();

  await ctx.editAndReply.reply(
    `‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n\n` +
      `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ:\n` +
      `‚Ä¢ ID: ${bestPhoto.file_id}\n` +
      `‚Ä¢ –†–∞–∑–º–µ—Ä: ${bestPhoto.width}x${bestPhoto.height}px\n` +
      `‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${bestPhoto.file_size ? `${Math.round(bestPhoto.file_size / 1024)} KB` : "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}\n\n` +
      `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
    {
      reply_markup: keyboard,
    },
  );

  await next();
}
