import logger from "@core/utils/logger";

import { getBroadcastById, updateBroadcast } from "../../db/models";
import type { Context } from "../core/interface/Context";
import { ParamsExtractorDB } from "../core/utils";

const BROADCAST_LIST_DETAIL_KEY = "broadcast.list.detail";

// –í–∞–ª–∏–¥–∞—Ü–∏—è cron –≤—ã—Ä–∞–∂–µ–Ω–∏—è
const isValidCronExpression = (cron: string): boolean => {
  const cronRegex =
    /^(\*|[0-5]?\d) (\*|[01]?\d|2[0-3]) (\*|[12]?\d|3[01]) (\*|[0]?\d|1[0-2]) (\*|[0-6])$/;
  return cronRegex.test(cron.trim());
};

export const broadcastEditTitleWait = async (ctx: Context) => {
  const newTitle = ctx.message?.text?.trim();

  if (!newTitle) {
    await ctx.editAndReply.reply(
      "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
    );
    return;
  }

  if (newTitle.length > 100) {
    await ctx.editAndReply.reply(
      "‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:",
    );
    return;
  }

  const sessionData = ctx.session?.data as any;
  const broadcastId = sessionData?.broadcastId;
  const page = sessionData?.page ?? 1;

  if (!broadcastId) {
    await ctx.editAndReply.reply("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
    await ctx.sessionClear?.();
    return;
  }

  try {
    const broadcast = await getBroadcastById(broadcastId);

    if (!broadcast) {
      await ctx.editAndReply.reply("‚ùå –ë—Ä–æ–¥–∫–∞—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
      await ctx.sessionClear?.();
      return;
    }

    await updateBroadcast(broadcastId, {
      title: newTitle,
    });

    await ctx.sessionClear?.();

    const detailParams = new ParamsExtractorDB(BROADCAST_LIST_DETAIL_KEY);
    detailParams.addParams({ chatId: broadcastId, page });
    const detailCallback = await detailParams.toStringAsync();

    const keyboard = {
      inline_keyboard: [
        [{ text: "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ—Ç–∞–ª—è–º", callback_data: detailCallback }],
      ],
    };

    await ctx.editAndReply.reply("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!", {
      reply_markup: keyboard,
    });
  } catch (error) {
    if (error instanceof Error) logger.error(error.message);
    await ctx.editAndReply.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è");
    await ctx.sessionClear?.();
  }
};

export const broadcastEditCronWait = async (ctx: Context) => {
  const newCron = ctx.message?.text?.trim();

  if (!newCron) {
    await ctx.editAndReply.reply(
      `‚ùå Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. 

–ü—Ä–∏–º–µ—Ä—ã
\`0 9 * * *\` - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
\`0 9 * * 1\` - –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 9:00  
\`0 9 1 * *\` - 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 9:00
\`0 */6 * * *\` - –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:`,
      { parse_mode: "Markdown" },
    );
    return;
  }

  if (!isValidCronExpression(newCron)) {
    await ctx.editAndReply.reply(
      `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç cron –≤—ã—Ä–∞–∂–µ–Ω–∏—è. 

–ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
- \`0 9 * * *\` - –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
- \`0 9 * * 1\` - –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 9:00  
- \`0 9 1 * *\` - 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 9:00
- \`0 */6 * * *\` - –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
- \`30 14 * * 5\` - –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 14:30

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑`,
      { parse_mode: "Markdown" },
    );
    return;
  }

  const sessionData = ctx.session?.data as any;
  const broadcastId = sessionData?.broadcastId;
  const page = sessionData?.page ?? 1;

  if (!broadcastId) {
    await ctx.editAndReply.reply("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
    await ctx.sessionClear?.();
    return;
  }

  try {
    const broadcast = await getBroadcastById(broadcastId);

    if (!broadcast) {
      await ctx.editAndReply.reply("‚ùå –ë—Ä–æ–¥–∫–∞—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
      await ctx.sessionClear?.();
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º cron —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å
    await updateBroadcast(broadcastId, {
      cronExpression: newCron,
    });

    await ctx.sessionClear?.();

    const detailParams = new ParamsExtractorDB(BROADCAST_LIST_DETAIL_KEY);
    detailParams.addParams({ chatId: broadcastId, page });
    const detailCallback = await detailParams.toStringAsync();

    const keyboard = {
      inline_keyboard: [
        [{ text: "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ—Ç–∞–ª—è–º", callback_data: detailCallback }],
      ],
    };

    await ctx.editAndReply.reply(
      `‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!

‚è∞ *–ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:* \`${newCron}\``,
      { reply_markup: keyboard, parse_mode: "Markdown" },
    );
  } catch (error) {
    if (error instanceof Error) logger.error(error.message);
    await ctx.editAndReply.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è");
    await ctx.sessionClear?.();
  }
};

export const broadcastScheduleDatetimeWait = async (ctx: Context) => {
  const dateTimeInput = ctx.message?.text?.trim();

  if (!dateTimeInput) {
    await ctx.reply(
      `‚ùå –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏.

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\`

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ \`15.10.2025 14:30\`
‚Ä¢ \`01.11.2025 09:00\``,
      { parse_mode: "Markdown" },
    );
    return;
  }

  // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
  const dateTimeRegex = /^(\d{2})\.(\d{2})\.(\d{4})\s+(\d{1,2}):(\d{2})$/;
  const match = dateTimeRegex.exec(dateTimeInput);

  if (!match) {
    await ctx.reply(
      `‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: \`–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\`

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ \`15.10.2025 14:30\`
‚Ä¢ \`01.11.2025 09:00\`
‚Ä¢ \`25.12.2025 18:15\``,
      { parse_mode: "Markdown" },
    );
    return;
  }

  const [, day, month, year, hours, minutes] = match;
  const targetDate = new Date(
    parseInt(year),
    parseInt(month) - 1,
    parseInt(day),
    parseInt(hours),
    parseInt(minutes),
  );

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞ –∏ –≤ –±—É–¥—É—â–µ–º
  const now = new Date();
  if (targetDate <= now) {
    await ctx.reply(
      `‚ùå –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º.

–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toLocaleString("ru-RU")}
–í–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${targetDate.toLocaleString("ru-RU")}

–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è:`,
      { parse_mode: "Markdown" },
    );
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ –±–æ–ª—å—à–µ –≥–æ–¥–∞)
  const oneYearFromNow = new Date(now.getTime() + 365 * 24 * 60 * 60 * 1000);
  if (targetDate > oneYearFromNow) {
    await ctx.reply(
      `‚ùå –î–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –≤ –±—É–¥—É—â–µ–º (–º–∞–∫—Å–∏–º—É–º 1 –≥–æ–¥).

–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –±–ª–∏–∂–µ –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏:`,
      { parse_mode: "Markdown" },
    );
    return;
  }

  const sessionData = ctx.session?.data as any;
  const broadcastId = sessionData?.broadcastId;
  const page = sessionData?.page ?? 1;

  if (!broadcastId) {
    await ctx.reply("‚ùå –°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑");
    await ctx.sessionClear?.();
    return;
  }

  try {
    const broadcast = await getBroadcastById(broadcastId);

    if (!broadcast) {
      await ctx.reply("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
      await ctx.sessionClear?.();
      return;
    }

    const cronExpression = `${targetDate.getMinutes()} ${targetDate.getHours()} ${targetDate.getDate()} ${targetDate.getMonth() + 1} *`;

    await updateBroadcast(broadcastId, {
      cronExpression,
      isScheduled: true,
      isRecurring: false,
      status: "scheduled",
    });

    await ctx.sessionClear?.();

    const detailParams = new ParamsExtractorDB(BROADCAST_LIST_DETAIL_KEY);
    detailParams.addParams({ chatId: broadcastId, page });
    const detailCallback = await detailParams.toStringAsync();

    const keyboard = {
      inline_keyboard: [
        [{ text: "üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –¥–µ—Ç–∞–ª—è–º", callback_data: detailCallback }],
      ],
    };

    await ctx.reply(
      `‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞!

üìÖ *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:* ${targetDate.toLocaleString("ru-RU")}
‚è∞ *Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ:* \`${cronExpression}\``,
      { reply_markup: keyboard, parse_mode: "Markdown" },
    );
  } catch (error) {
    if (error instanceof Error) logger.error(error.message);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏");
    await ctx.sessionClear?.();
  }
};

export default {
  broadcast_edit_title_wait: broadcastEditTitleWait,
  broadcast_edit_cron_wait: broadcastEditCronWait,
  broadcast_schedule_datetime_wait: broadcastScheduleDatetimeWait,
};
