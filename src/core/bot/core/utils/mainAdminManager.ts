import { addMainAdminToChat, getMainAdminsForChat, removeMainAdminFromChat } from "@core/db/models";

import type { Context } from "../interface/Context";
import { createMsg } from "./createMsg";
import { loggerTG } from "./logger";

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫ —á–∞—Ç—É
 * @param chatId - ID —á–∞—Ç–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
 * @param adminChatId - Telegram chat ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @param adminName - –ò–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
export async function addChatMainAdmin(
  chatId: number,
  adminChatId: string,
  adminName?: string
): Promise<boolean> {
  try {
    await addMainAdminToChat(chatId, adminChatId, adminName);
    await loggerTG.info(
      `–î–æ–±–∞–≤–ª–µ–Ω –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${adminName ?? adminChatId} –¥–ª—è —á–∞—Ç–∞ ID ${chatId}`
    );
    return true;
  } catch (error) {
    await loggerTG.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${String(error)}`
    );
    return false;
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —á–∞—Ç–∞
 * @param chatId - ID —á–∞—Ç–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
 * @param adminChatId - Telegram chat ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 */
export async function removeChatMainAdmin(
  chatId: number,
  adminChatId: string
): Promise<boolean> {
  try {
    await removeMainAdminFromChat(chatId, adminChatId);
    await loggerTG.info(
      `–£–¥–∞–ª–µ–Ω –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${adminChatId} –∏–∑ —á–∞—Ç–∞ ID ${chatId}`
    );
    return true;
  } catch (error) {
    await loggerTG.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${String(error)}`
    );
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞
 * @param chatId - ID —á–∞—Ç–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
 */
export async function getChatMainAdminsList(chatId: number) {
  try {
    const admins = await getMainAdminsForChat(chatId);
    return admins;
  } catch (error) {
    await loggerTG.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${String(error)}`
    );
    return [];
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —á–∞—Ç
 * @param ctx - –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
 * @param chatId - ID —á–∞—Ç–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
 */
export async function sendMainAdminsList(ctx: Context, chatId: number) {
  try {
    const admins = await getChatMainAdminsList(chatId);
    
    if (admins.length === 0) {
      const msg = createMsg("info", "–î–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –≥–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã");
      await ctx.reply(msg.text, { entities: msg.entities });
      return;
    }

    let adminsList = "üë• –ì–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞:\n\n";
    admins.forEach((admin, index) => {
      adminsList += `${index + 1}. ${admin.name ?? "–ë–µ–∑ –∏–º–µ–Ω–∏"}\n`;
      adminsList += `   ID: ${admin.adminChatId}\n\n`;
    });

    const msg = createMsg("info", adminsList);
    await ctx.reply(msg.text, { entities: msg.entities });
  } catch (error) {
    await loggerTG.error(
      `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${String(error)}`
    );
    const msg = createMsg("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤");
    await ctx.reply(msg.text, { entities: msg.entities });
  }
}